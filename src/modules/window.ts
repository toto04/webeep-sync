import path from "path"
import { app, BrowserWindow, nativeImage } from "electron"
import { createLogger } from "./logger"
import { __static } from "../util"

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
const iconImg = nativeImage.createFromPath(
  path.join(__static, "/icons/icon.ico"),
)

const { debug } = createLogger("WINDOW")

export let mainWindow: BrowserWindow

export async function createWindow(): Promise<void> {
  return new Promise((resolve, reject) => {
    app.dock?.show()
    debug("Creating new main windows")

    // Create the browser window.
    mainWindow = new BrowserWindow({
      height: 600,
      width: 800,
      autoHideMenuBar: true,
      titleBarStyle: "hidden",
      trafficLightPosition: { x: 9, y: 9 },
      minHeight: 460,
      minWidth: 600,
      webPreferences: {
        nodeIntegration: true,
        contextIsolation: false,
      },
      icon: iconImg,
      show: false,
    })
    mainWindow.on("ready-to-show", () => {
      mainWindow.show()
      resolve()
    })

    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)
  })
}

/**
 * sends data to the frontend via electron's IPC
 * @param channel the IPC channel string on which the message is sent
 * @param args args to be sent with the message
 * @returns true if the message was sent, false otherwise
 */
export function send(channel: string, ...args: unknown[]) {
  if (mainWindow && !mainWindow.isDestroyed()) {
    mainWindow.webContents.send(channel, ...args)
    return true
  }
  return false
}

export async function focus(): Promise<void> {
  const windows = BrowserWindow.getAllWindows()

  if (windows.length === 0) await createWindow()
  else
    return new Promise((res, rej) => {
      windows[0].on("focus", res)
      windows[0].focus()
    })
}
